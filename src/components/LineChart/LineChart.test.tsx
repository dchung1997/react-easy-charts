import React from "react";
import '@testing-library/jest-dom'
import {render, screen } from '@testing-library/react'

import LineChart from "./LineChart";

describe("Empty Linechart", () => {
    beforeAll(() => {
        jest.spyOn(console, 'error').mockImplementation(() => {});
    });

    afterAll(() => {
        console.error.mockRestore();
    });

    afterEach(() => {
        console.error.mockClear();
    });

  test("Check Data is not passed.", () => {
    render(<LineChart/>);
    expect(console.error).toHaveBeenCalled();
    expect(console.error.mock.calls[0][0]).toContain('Data must not be empty, undefined, or null for Line Chart.');
  });

  test("Check Data is empty.", () => {
    render(<LineChart data={[]} />);
    expect(console.error).toHaveBeenCalled();
    expect(console.error.mock.calls[0][0]).toContain('Data must not be empty, undefined, or null for Line Chart.');
  });  


  test("Check Data is undefined.", () => {
    render(<LineChart data={undefined} />);
    expect(console.error).toHaveBeenCalled();
    expect(console.error.mock.calls[0][0]).toContain('Data must not be empty, undefined, or null for Line Chart.');
  });    


  test("Check Data is null.", () => {
    render(<LineChart data={null} />);
    expect(console.error).toHaveBeenCalled();
    expect(console.error.mock.calls[0][0]).toContain('Data must not be empty, undefined, or null for Line Chart.');
  });    
});

describe("Empty or Null Factor for Exponential or Log Scales.", () => {
    beforeAll(() => {
        jest.spyOn(console, 'error').mockImplementation(() => {});
    });

    afterAll(() => {
        console.error.mockRestore();
    });

    afterEach(() => {
        console.error.mockClear();
    });

    test("Check Factor is null for Exponential Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="exp"
            factor={null}             
        />);
        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('Line Chart requires exponent for exponential scale.');
      });  

      test("Check Factor is string for Exponential Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="exp"
            factor={""}             
        />);
        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('Line Chart requires exponent for exponential scale.');
      });  

      test("Check Factor is array for Exponential Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="exp"
            factor={[]}             
        />);
        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('Line Chart requires exponent for exponential scale.');
      });  

      test("Check Factor is object for Exponential Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="exp"
            factor={{x:3, y:2}}             
        />);
        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('Line Chart requires exponent for exponential scale.');
      });  

      test("Check Factor is undefined for Exponential Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="exp"
            factor={undefined}             
        />);
        expect(console.error).not.toHaveBeenCalled();
      });  

      test("Check Factor is null for Exponential Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="exp"
            factor={null}             
        />);
        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('Line Chart requires exponent for exponential scale.');
      });  

      test("Check Factor is string for Log Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="log"
            factor={""}             
        />);
        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('Line Chart requires base for logarithmic scale.');
      });  

      test("Check Factor is array for Log Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="log"
            factor={[]}             
        />);
        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('Line Chart requires base for logarithmic scale.');
      });  

      test("Check Factor is object for Log Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="log"
            factor={{x:3, y:2}}             
        />);
        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('Line Chart requires base for logarithmic scale.');
      });  

      test("Check Factor is undefined for Log Scale.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":3,"y":9},{"x":1,"y":1},{"x":2,"y":4},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            scale="log"
            factor={undefined}             
        />);
        expect(console.error).not.toHaveBeenCalled();
      });  
});

describe("Numeric Line Chart.", () => {
    test("Single Line Chart.", () => {
        let { container } = render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            title="Quadratric Curve"
        />);

        let paths = container.querySelectorAll("path");
        expect(screen.getByRole('heading', {level: 3})).toBeInTheDocument()
        expect(paths.length).toBe(1);        
      });  


      test("Multiple Line Chart.", () => {
        let { container } = render(<LineChart data={        
                [
                    {
                        id: 1,
                        data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                    },
                    {
                        id: 2,
                        data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                    },
                    {
                        id: 3,
                        data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                    }                                        
                ]
            }
            title="Quadratric Curve"
        />);

        let paths = container.querySelectorAll("path");
        expect(screen.getByRole('heading', {level: 3})).toBeInTheDocument()
        expect(paths.length).toBe(3);        
      });  


      test("No Title Line Chart.", () => {
        let { container } = render(<LineChart data={        
                [
                    {
                        id: 1,
                        data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                    }                                     
                ]
            }
        />);

        let paths = container.querySelectorAll("path");
        let heading = container.querySelectorAll("h3");
        expect(heading.length).toBe(0);
        expect(paths.length).toBe(1);        
      });  
      
      test("Exponential Line Chart.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            title="Quadratric Curve"
            scale="exp"
            factor={2}
        />);

      });  

      test("Logarithmic Line Chart.", () => {
        render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            title="Quadratric Curve"
            scale="exp"
            factor={2}
        />);

      });        

      test("Failing Logarithmic Line Chart.", () => {
        jest.spyOn(console, 'error').mockImplementation(() => {});

        let { container } = render(<LineChart data={        
                [{
                    id: 1,
                    data: [{"x":0,"y":0},{"x":1,"y":1},{"x":2,"y":4},{"x":3,"y":9},{"x":4,"y":16},{"x":5,"y":25},{"x":6,"y":36},{"x":7,"y":49},{"x":8,"y":64},{"x":9,"y":81},{"x":10,"y":100},{"x":11,"y":121},{"x":12,"y":144},{"x":13,"y":169},{"x":14,"y":196},{"x":15,"y":225},{"x":16,"y":256},{"x":17,"y":289},{"x":18,"y":324},{"x":19,"y":361},{"x":20,"y":400},{"x":21,"y":441},{"x":22,"y":484},{"x":23,"y":529},{"x":24,"y":576},{"x":25,"y":625},{"x":26,"y":676},{"x":27,"y":729},{"x":28,"y":784},{"x":29,"y":841},{"x":30,"y":900},{"x":31,"y":961},{"x":32,"y":1024},{"x":33,"y":1089},{"x":34,"y":1156},{"x":35,"y":1225},{"x":36,"y":1296},{"x":37,"y":1369},{"x":38,"y":1444},{"x":39,"y":1521},{"x":40,"y":1600},{"x":41,"y":1681},{"x":42,"y":1764},{"x":43,"y":1849},{"x":44,"y":1936},{"x":45,"y":2025},{"x":46,"y":2116},{"x":47,"y":2209},{"x":48,"y":2304},{"x":49,"y":2401},{"x":50,"y":2500}]
                }]
            }
            title="Quadratric Curve"
            scale="log"
            factor={2}
        />);

        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('Log Scale requires minimum value of at least 1.'); 
        console.error.mockRestore();

      });  
      
});


describe("Time Series Line Chart", () => {
    test("Single Time Series Chart.", () => {
        render(<LineChart data={        
            [
                {
                  id: "aapl",
                  data: [{"Date":"2023-01-03","Open":130.279999,"High":130.899994,"Low":124.169998,"Close":125.07,"Adj Close":124.538658,"Volume":112117500},{"Date":"2023-01-04","Open":126.889999,"High":128.660004,"Low":125.080002,"Close":126.360001,"Adj Close":125.823189,"Volume":89113600},{"Date":"2023-01-05","Open":127.129997,"High":127.769997,"Low":124.760002,"Close":125.019997,"Adj Close":124.488869,"Volume":80962700},{"Date":"2023-01-06","Open":126.010002,"High":130.289993,"Low":124.889999,"Close":129.619995,"Adj Close":129.069336,"Volume":87754700},{"Date":"2023-01-09","Open":130.470001,"High":133.410004,"Low":129.889999,"Close":130.149994,"Adj Close":129.597076,"Volume":70790800},{"Date":"2023-01-10","Open":130.259995,"High":131.259995,"Low":128.119995,"Close":130.729996,"Adj Close":130.174622,"Volume":63896200},{"Date":"2023-01-11","Open":131.25,"High":133.509995,"Low":130.460007,"Close":133.490005,"Adj Close":132.922897,"Volume":69458900},{"Date":"2023-01-12","Open":133.880005,"High":134.259995,"Low":131.440002,"Close":133.410004,"Adj Close":132.843231,"Volume":71379600},{"Date":"2023-01-13","Open":132.029999,"High":134.919998,"Low":131.660004,"Close":134.759995,"Adj Close":134.187485,"Volume":57809700},{"Date":"2023-01-17","Open":134.830002,"High":137.289993,"Low":134.130005,"Close":135.940002,"Adj Close":135.362488,"Volume":63646600},{"Date":"2023-01-18","Open":136.820007,"High":138.610001,"Low":135.029999,"Close":135.210007,"Adj Close":134.63559,"Volume":69672800},{"Date":"2023-01-19","Open":134.080002,"High":136.25,"Low":133.770004,"Close":135.270004,"Adj Close":134.695328,"Volume":58280400},{"Date":"2023-01-20","Open":135.279999,"High":138.020004,"Low":134.220001,"Close":137.869995,"Adj Close":137.284271,"Volume":80223600},{"Date":"2023-01-23","Open":138.119995,"High":143.320007,"Low":137.899994,"Close":141.110001,"Adj Close":140.510529,"Volume":81760300},{"Date":"2023-01-24","Open":140.309998,"High":143.160004,"Low":140.300003,"Close":142.529999,"Adj Close":141.9245,"Volume":66435100},{"Date":"2023-01-25","Open":140.889999,"High":142.429993,"Low":138.809998,"Close":141.860001,"Adj Close":141.257339,"Volume":65799300},{"Date":"2023-01-26","Open":143.169998,"High":144.25,"Low":141.899994,"Close":143.960007,"Adj Close":143.348419,"Volume":54105100},{"Date":"2023-01-27","Open":143.160004,"High":147.229996,"Low":143.080002,"Close":145.929993,"Adj Close":145.310043,"Volume":70555800},{"Date":"2023-01-30","Open":144.960007,"High":145.550003,"Low":142.850006,"Close":143,"Adj Close":142.392487,"Volume":64015300},{"Date":"2023-01-31","Open":142.699997,"High":144.339996,"Low":142.279999,"Close":144.289993,"Adj Close":143.677002,"Volume":65874500},{"Date":"2023-02-01","Open":143.970001,"High":146.610001,"Low":141.320007,"Close":145.429993,"Adj Close":144.812164,"Volume":77663600},{"Date":"2023-02-02","Open":148.899994,"High":151.179993,"Low":148.169998,"Close":150.820007,"Adj Close":150.179276,"Volume":118339000},{"Date":"2023-02-03","Open":148.029999,"High":157.380005,"Low":147.830002,"Close":154.5,"Adj Close":153.843628,"Volume":154357300},{"Date":"2023-02-06","Open":152.570007,"High":153.100006,"Low":150.779999,"Close":151.729996,"Adj Close":151.085403,"Volume":69858300},{"Date":"2023-02-07","Open":150.639999,"High":155.229996,"Low":150.639999,"Close":154.649994,"Adj Close":153.992996,"Volume":83322600},{"Date":"2023-02-08","Open":153.880005,"High":154.580002,"Low":151.169998,"Close":151.919998,"Adj Close":151.274597,"Volume":64120100},{"Date":"2023-02-09","Open":153.779999,"High":154.330002,"Low":150.419998,"Close":150.869995,"Adj Close":150.229065,"Volume":56007100},{"Date":"2023-02-10","Open":149.460007,"High":151.339996,"Low":149.220001,"Close":151.009995,"Adj Close":150.598038,"Volume":57450700},{"Date":"2023-02-13","Open":150.949997,"High":154.259995,"Low":150.919998,"Close":153.850006,"Adj Close":153.430313,"Volume":62199000},{"Date":"2023-02-14","Open":152.119995,"High":153.770004,"Low":150.860001,"Close":153.199997,"Adj Close":152.782074,"Volume":61707600},{"Date":"2023-02-15","Open":153.110001,"High":155.5,"Low":152.880005,"Close":155.330002,"Adj Close":154.906265,"Volume":65573800},{"Date":"2023-02-16","Open":153.509995,"High":156.330002,"Low":153.350006,"Close":153.710007,"Adj Close":153.29068,"Volume":68167900},{"Date":"2023-02-17","Open":152.350006,"High":153,"Low":150.850006,"Close":152.550003,"Adj Close":152.13385,"Volume":59144100},{"Date":"2023-02-21","Open":150.199997,"High":151.300003,"Low":148.410004,"Close":148.479996,"Adj Close":148.074951,"Volume":58867200},{"Date":"2023-02-22","Open":148.869995,"High":149.949997,"Low":147.160004,"Close":148.910004,"Adj Close":148.503769,"Volume":51011300},{"Date":"2023-02-23","Open":150.089996,"High":150.339996,"Low":147.240005,"Close":149.399994,"Adj Close":148.992432,"Volume":48394200},{"Date":"2023-02-24","Open":147.110001,"High":147.190002,"Low":145.720001,"Close":146.710007,"Adj Close":146.309784,"Volume":55469600},{"Date":"2023-02-27","Open":147.710007,"High":149.169998,"Low":147.449997,"Close":147.919998,"Adj Close":147.516479,"Volume":44998500},{"Date":"2023-02-28","Open":147.050003,"High":149.080002,"Low":146.830002,"Close":147.410004,"Adj Close":147.007874,"Volume":50547000},{"Date":"2023-03-01","Open":146.830002,"High":147.229996,"Low":145.009995,"Close":145.309998,"Adj Close":144.913605,"Volume":55479000},{"Date":"2023-03-02","Open":144.380005,"High":146.710007,"Low":143.899994,"Close":145.910004,"Adj Close":145.511978,"Volume":52238100},{"Date":"2023-03-03","Open":148.039993,"High":151.110001,"Low":147.330002,"Close":151.029999,"Adj Close":150.617996,"Volume":70732300},{"Date":"2023-03-06","Open":153.789993,"High":156.300003,"Low":153.460007,"Close":153.830002,"Adj Close":153.41037,"Volume":87558000},{"Date":"2023-03-07","Open":153.699997,"High":154.029999,"Low":151.130005,"Close":151.600006,"Adj Close":151.186447,"Volume":56182000},{"Date":"2023-03-08","Open":152.809998,"High":153.470001,"Low":151.830002,"Close":152.869995,"Adj Close":152.452972,"Volume":47204800},{"Date":"2023-03-09","Open":153.559998,"High":154.539993,"Low":150.229996,"Close":150.589996,"Adj Close":150.179184,"Volume":53833600},{"Date":"2023-03-10","Open":150.210007,"High":150.940002,"Low":147.610001,"Close":148.5,"Adj Close":148.094894,"Volume":68572400},{"Date":"2023-03-13","Open":147.809998,"High":153.139999,"Low":147.699997,"Close":150.470001,"Adj Close":150.059525,"Volume":84457100},{"Date":"2023-03-14","Open":151.279999,"High":153.399994,"Low":150.100006,"Close":152.589996,"Adj Close":152.173737,"Volume":73695900},{"Date":"2023-03-15","Open":151.190002,"High":153.25,"Low":149.919998,"Close":152.990005,"Adj Close":152.572647,"Volume":77167900},{"Date":"2023-03-16","Open":152.160004,"High":156.460007,"Low":151.639999,"Close":155.850006,"Adj Close":155.42485,"Volume":76161100},{"Date":"2023-03-17","Open":156.080002,"High":156.740005,"Low":154.279999,"Close":155,"Adj Close":154.577164,"Volume":98944600},{"Date":"2023-03-20","Open":155.070007,"High":157.820007,"Low":154.149994,"Close":157.399994,"Adj Close":156.970612,"Volume":73641400},{"Date":"2023-03-21","Open":157.320007,"High":159.399994,"Low":156.539993,"Close":159.279999,"Adj Close":158.84549,"Volume":73938300},{"Date":"2023-03-22","Open":159.300003,"High":162.139999,"Low":157.809998,"Close":157.830002,"Adj Close":157.399445,"Volume":75701800},{"Date":"2023-03-23","Open":158.830002,"High":161.550003,"Low":157.679993,"Close":158.929993,"Adj Close":158.496445,"Volume":67622100},{"Date":"2023-03-24","Open":158.860001,"High":160.339996,"Low":157.850006,"Close":160.25,"Adj Close":159.812836,"Volume":59196500},{"Date":"2023-03-27","Open":159.940002,"High":160.770004,"Low":157.869995,"Close":158.279999,"Adj Close":157.848206,"Volume":52390300},{"Date":"2023-03-28","Open":157.970001,"High":158.490005,"Low":155.979996,"Close":157.649994,"Adj Close":157.219925,"Volume":45992200},{"Date":"2023-03-29","Open":159.369995,"High":161.050003,"Low":159.350006,"Close":160.770004,"Adj Close":160.331421,"Volume":51305700},{"Date":"2023-03-30","Open":161.529999,"High":162.470001,"Low":161.270004,"Close":162.360001,"Adj Close":161.917084,"Volume":49501700},{"Date":"2023-03-31","Open":162.440002,"High":165,"Low":161.910004,"Close":164.899994,"Adj Close":164.45015,"Volume":68749800},{"Date":"2023-04-03","Open":164.270004,"High":166.289993,"Low":164.220001,"Close":166.169998,"Adj Close":165.71669,"Volume":56976200},{"Date":"2023-04-04","Open":166.600006,"High":166.839996,"Low":165.110001,"Close":165.630005,"Adj Close":165.178177,"Volume":46278300},{"Date":"2023-04-05","Open":164.740005,"High":165.050003,"Low":161.800003,"Close":163.759995,"Adj Close":163.313263,"Volume":51511700},{"Date":"2023-04-06","Open":162.429993,"High":164.960007,"Low":162,"Close":164.660004,"Adj Close":164.210831,"Volume":45390100},{"Date":"2023-04-10","Open":161.419998,"High":162.029999,"Low":160.080002,"Close":162.029999,"Adj Close":161.587982,"Volume":47716900},{"Date":"2023-04-11","Open":162.350006,"High":162.360001,"Low":160.509995,"Close":160.800003,"Adj Close":160.361343,"Volume":47644200},{"Date":"2023-04-12","Open":161.220001,"High":162.059998,"Low":159.779999,"Close":160.100006,"Adj Close":159.663269,"Volume":50133100},{"Date":"2023-04-13","Open":161.630005,"High":165.800003,"Low":161.419998,"Close":165.559998,"Adj Close":165.108353,"Volume":68445600},{"Date":"2023-04-14","Open":164.589996,"High":166.320007,"Low":163.820007,"Close":165.210007,"Adj Close":164.759323,"Volume":49386500},{"Date":"2023-04-17","Open":165.089996,"High":165.389999,"Low":164.029999,"Close":165.229996,"Adj Close":164.779251,"Volume":41516200},{"Date":"2023-04-18","Open":166.100006,"High":167.410004,"Low":165.649994,"Close":166.470001,"Adj Close":166.015884,"Volume":49923000},{"Date":"2023-04-19","Open":165.800003,"High":168.160004,"Low":165.539993,"Close":167.630005,"Adj Close":167.172714,"Volume":47720200},{"Date":"2023-04-20","Open":166.089996,"High":167.869995,"Low":165.559998,"Close":166.649994,"Adj Close":166.195389,"Volume":52456400},{"Date":"2023-04-21","Open":165.050003,"High":166.449997,"Low":164.490005,"Close":165.020004,"Adj Close":164.569839,"Volume":58337300},{"Date":"2023-04-24","Open":165,"High":165.600006,"Low":163.889999,"Close":165.330002,"Adj Close":164.878983,"Volume":41949600},{"Date":"2023-04-25","Open":165.190002,"High":166.309998,"Low":163.729996,"Close":163.770004,"Adj Close":163.323242,"Volume":48714100},{"Date":"2023-04-26","Open":163.059998,"High":165.279999,"Low":162.800003,"Close":163.759995,"Adj Close":163.313263,"Volume":45498800},{"Date":"2023-04-27","Open":165.190002,"High":168.559998,"Low":165.190002,"Close":168.410004,"Adj Close":167.950592,"Volume":64902300},{"Date":"2023-04-28","Open":168.490005,"High":169.850006,"Low":167.880005,"Close":169.679993,"Adj Close":169.217117,"Volume":55209200}]
                }
              ]
        }        
        title="Apple Historic Stock Data"
        x="Date"
        y="Close"        
        />);
    })

    test("No Accessor Time Series Chart.", () => {
        jest.spyOn(console, 'error').mockImplementation(() => {});

        render(<LineChart data={        
            [
                {
                  id: "aapl",
                  data: [{"Date":"2023-01-03","Open":130.279999,"High":130.899994,"Low":124.169998,"Close":125.07,"Adj Close":124.538658,"Volume":112117500},{"Date":"2023-01-04","Open":126.889999,"High":128.660004,"Low":125.080002,"Close":126.360001,"Adj Close":125.823189,"Volume":89113600},{"Date":"2023-01-05","Open":127.129997,"High":127.769997,"Low":124.760002,"Close":125.019997,"Adj Close":124.488869,"Volume":80962700},{"Date":"2023-01-06","Open":126.010002,"High":130.289993,"Low":124.889999,"Close":129.619995,"Adj Close":129.069336,"Volume":87754700},{"Date":"2023-01-09","Open":130.470001,"High":133.410004,"Low":129.889999,"Close":130.149994,"Adj Close":129.597076,"Volume":70790800},{"Date":"2023-01-10","Open":130.259995,"High":131.259995,"Low":128.119995,"Close":130.729996,"Adj Close":130.174622,"Volume":63896200},{"Date":"2023-01-11","Open":131.25,"High":133.509995,"Low":130.460007,"Close":133.490005,"Adj Close":132.922897,"Volume":69458900},{"Date":"2023-01-12","Open":133.880005,"High":134.259995,"Low":131.440002,"Close":133.410004,"Adj Close":132.843231,"Volume":71379600},{"Date":"2023-01-13","Open":132.029999,"High":134.919998,"Low":131.660004,"Close":134.759995,"Adj Close":134.187485,"Volume":57809700},{"Date":"2023-01-17","Open":134.830002,"High":137.289993,"Low":134.130005,"Close":135.940002,"Adj Close":135.362488,"Volume":63646600},{"Date":"2023-01-18","Open":136.820007,"High":138.610001,"Low":135.029999,"Close":135.210007,"Adj Close":134.63559,"Volume":69672800},{"Date":"2023-01-19","Open":134.080002,"High":136.25,"Low":133.770004,"Close":135.270004,"Adj Close":134.695328,"Volume":58280400},{"Date":"2023-01-20","Open":135.279999,"High":138.020004,"Low":134.220001,"Close":137.869995,"Adj Close":137.284271,"Volume":80223600},{"Date":"2023-01-23","Open":138.119995,"High":143.320007,"Low":137.899994,"Close":141.110001,"Adj Close":140.510529,"Volume":81760300},{"Date":"2023-01-24","Open":140.309998,"High":143.160004,"Low":140.300003,"Close":142.529999,"Adj Close":141.9245,"Volume":66435100},{"Date":"2023-01-25","Open":140.889999,"High":142.429993,"Low":138.809998,"Close":141.860001,"Adj Close":141.257339,"Volume":65799300},{"Date":"2023-01-26","Open":143.169998,"High":144.25,"Low":141.899994,"Close":143.960007,"Adj Close":143.348419,"Volume":54105100},{"Date":"2023-01-27","Open":143.160004,"High":147.229996,"Low":143.080002,"Close":145.929993,"Adj Close":145.310043,"Volume":70555800},{"Date":"2023-01-30","Open":144.960007,"High":145.550003,"Low":142.850006,"Close":143,"Adj Close":142.392487,"Volume":64015300},{"Date":"2023-01-31","Open":142.699997,"High":144.339996,"Low":142.279999,"Close":144.289993,"Adj Close":143.677002,"Volume":65874500},{"Date":"2023-02-01","Open":143.970001,"High":146.610001,"Low":141.320007,"Close":145.429993,"Adj Close":144.812164,"Volume":77663600},{"Date":"2023-02-02","Open":148.899994,"High":151.179993,"Low":148.169998,"Close":150.820007,"Adj Close":150.179276,"Volume":118339000},{"Date":"2023-02-03","Open":148.029999,"High":157.380005,"Low":147.830002,"Close":154.5,"Adj Close":153.843628,"Volume":154357300},{"Date":"2023-02-06","Open":152.570007,"High":153.100006,"Low":150.779999,"Close":151.729996,"Adj Close":151.085403,"Volume":69858300},{"Date":"2023-02-07","Open":150.639999,"High":155.229996,"Low":150.639999,"Close":154.649994,"Adj Close":153.992996,"Volume":83322600},{"Date":"2023-02-08","Open":153.880005,"High":154.580002,"Low":151.169998,"Close":151.919998,"Adj Close":151.274597,"Volume":64120100},{"Date":"2023-02-09","Open":153.779999,"High":154.330002,"Low":150.419998,"Close":150.869995,"Adj Close":150.229065,"Volume":56007100},{"Date":"2023-02-10","Open":149.460007,"High":151.339996,"Low":149.220001,"Close":151.009995,"Adj Close":150.598038,"Volume":57450700},{"Date":"2023-02-13","Open":150.949997,"High":154.259995,"Low":150.919998,"Close":153.850006,"Adj Close":153.430313,"Volume":62199000},{"Date":"2023-02-14","Open":152.119995,"High":153.770004,"Low":150.860001,"Close":153.199997,"Adj Close":152.782074,"Volume":61707600},{"Date":"2023-02-15","Open":153.110001,"High":155.5,"Low":152.880005,"Close":155.330002,"Adj Close":154.906265,"Volume":65573800},{"Date":"2023-02-16","Open":153.509995,"High":156.330002,"Low":153.350006,"Close":153.710007,"Adj Close":153.29068,"Volume":68167900},{"Date":"2023-02-17","Open":152.350006,"High":153,"Low":150.850006,"Close":152.550003,"Adj Close":152.13385,"Volume":59144100},{"Date":"2023-02-21","Open":150.199997,"High":151.300003,"Low":148.410004,"Close":148.479996,"Adj Close":148.074951,"Volume":58867200},{"Date":"2023-02-22","Open":148.869995,"High":149.949997,"Low":147.160004,"Close":148.910004,"Adj Close":148.503769,"Volume":51011300},{"Date":"2023-02-23","Open":150.089996,"High":150.339996,"Low":147.240005,"Close":149.399994,"Adj Close":148.992432,"Volume":48394200},{"Date":"2023-02-24","Open":147.110001,"High":147.190002,"Low":145.720001,"Close":146.710007,"Adj Close":146.309784,"Volume":55469600},{"Date":"2023-02-27","Open":147.710007,"High":149.169998,"Low":147.449997,"Close":147.919998,"Adj Close":147.516479,"Volume":44998500},{"Date":"2023-02-28","Open":147.050003,"High":149.080002,"Low":146.830002,"Close":147.410004,"Adj Close":147.007874,"Volume":50547000},{"Date":"2023-03-01","Open":146.830002,"High":147.229996,"Low":145.009995,"Close":145.309998,"Adj Close":144.913605,"Volume":55479000},{"Date":"2023-03-02","Open":144.380005,"High":146.710007,"Low":143.899994,"Close":145.910004,"Adj Close":145.511978,"Volume":52238100},{"Date":"2023-03-03","Open":148.039993,"High":151.110001,"Low":147.330002,"Close":151.029999,"Adj Close":150.617996,"Volume":70732300},{"Date":"2023-03-06","Open":153.789993,"High":156.300003,"Low":153.460007,"Close":153.830002,"Adj Close":153.41037,"Volume":87558000},{"Date":"2023-03-07","Open":153.699997,"High":154.029999,"Low":151.130005,"Close":151.600006,"Adj Close":151.186447,"Volume":56182000},{"Date":"2023-03-08","Open":152.809998,"High":153.470001,"Low":151.830002,"Close":152.869995,"Adj Close":152.452972,"Volume":47204800},{"Date":"2023-03-09","Open":153.559998,"High":154.539993,"Low":150.229996,"Close":150.589996,"Adj Close":150.179184,"Volume":53833600},{"Date":"2023-03-10","Open":150.210007,"High":150.940002,"Low":147.610001,"Close":148.5,"Adj Close":148.094894,"Volume":68572400},{"Date":"2023-03-13","Open":147.809998,"High":153.139999,"Low":147.699997,"Close":150.470001,"Adj Close":150.059525,"Volume":84457100},{"Date":"2023-03-14","Open":151.279999,"High":153.399994,"Low":150.100006,"Close":152.589996,"Adj Close":152.173737,"Volume":73695900},{"Date":"2023-03-15","Open":151.190002,"High":153.25,"Low":149.919998,"Close":152.990005,"Adj Close":152.572647,"Volume":77167900},{"Date":"2023-03-16","Open":152.160004,"High":156.460007,"Low":151.639999,"Close":155.850006,"Adj Close":155.42485,"Volume":76161100},{"Date":"2023-03-17","Open":156.080002,"High":156.740005,"Low":154.279999,"Close":155,"Adj Close":154.577164,"Volume":98944600},{"Date":"2023-03-20","Open":155.070007,"High":157.820007,"Low":154.149994,"Close":157.399994,"Adj Close":156.970612,"Volume":73641400},{"Date":"2023-03-21","Open":157.320007,"High":159.399994,"Low":156.539993,"Close":159.279999,"Adj Close":158.84549,"Volume":73938300},{"Date":"2023-03-22","Open":159.300003,"High":162.139999,"Low":157.809998,"Close":157.830002,"Adj Close":157.399445,"Volume":75701800},{"Date":"2023-03-23","Open":158.830002,"High":161.550003,"Low":157.679993,"Close":158.929993,"Adj Close":158.496445,"Volume":67622100},{"Date":"2023-03-24","Open":158.860001,"High":160.339996,"Low":157.850006,"Close":160.25,"Adj Close":159.812836,"Volume":59196500},{"Date":"2023-03-27","Open":159.940002,"High":160.770004,"Low":157.869995,"Close":158.279999,"Adj Close":157.848206,"Volume":52390300},{"Date":"2023-03-28","Open":157.970001,"High":158.490005,"Low":155.979996,"Close":157.649994,"Adj Close":157.219925,"Volume":45992200},{"Date":"2023-03-29","Open":159.369995,"High":161.050003,"Low":159.350006,"Close":160.770004,"Adj Close":160.331421,"Volume":51305700},{"Date":"2023-03-30","Open":161.529999,"High":162.470001,"Low":161.270004,"Close":162.360001,"Adj Close":161.917084,"Volume":49501700},{"Date":"2023-03-31","Open":162.440002,"High":165,"Low":161.910004,"Close":164.899994,"Adj Close":164.45015,"Volume":68749800},{"Date":"2023-04-03","Open":164.270004,"High":166.289993,"Low":164.220001,"Close":166.169998,"Adj Close":165.71669,"Volume":56976200},{"Date":"2023-04-04","Open":166.600006,"High":166.839996,"Low":165.110001,"Close":165.630005,"Adj Close":165.178177,"Volume":46278300},{"Date":"2023-04-05","Open":164.740005,"High":165.050003,"Low":161.800003,"Close":163.759995,"Adj Close":163.313263,"Volume":51511700},{"Date":"2023-04-06","Open":162.429993,"High":164.960007,"Low":162,"Close":164.660004,"Adj Close":164.210831,"Volume":45390100},{"Date":"2023-04-10","Open":161.419998,"High":162.029999,"Low":160.080002,"Close":162.029999,"Adj Close":161.587982,"Volume":47716900},{"Date":"2023-04-11","Open":162.350006,"High":162.360001,"Low":160.509995,"Close":160.800003,"Adj Close":160.361343,"Volume":47644200},{"Date":"2023-04-12","Open":161.220001,"High":162.059998,"Low":159.779999,"Close":160.100006,"Adj Close":159.663269,"Volume":50133100},{"Date":"2023-04-13","Open":161.630005,"High":165.800003,"Low":161.419998,"Close":165.559998,"Adj Close":165.108353,"Volume":68445600},{"Date":"2023-04-14","Open":164.589996,"High":166.320007,"Low":163.820007,"Close":165.210007,"Adj Close":164.759323,"Volume":49386500},{"Date":"2023-04-17","Open":165.089996,"High":165.389999,"Low":164.029999,"Close":165.229996,"Adj Close":164.779251,"Volume":41516200},{"Date":"2023-04-18","Open":166.100006,"High":167.410004,"Low":165.649994,"Close":166.470001,"Adj Close":166.015884,"Volume":49923000},{"Date":"2023-04-19","Open":165.800003,"High":168.160004,"Low":165.539993,"Close":167.630005,"Adj Close":167.172714,"Volume":47720200},{"Date":"2023-04-20","Open":166.089996,"High":167.869995,"Low":165.559998,"Close":166.649994,"Adj Close":166.195389,"Volume":52456400},{"Date":"2023-04-21","Open":165.050003,"High":166.449997,"Low":164.490005,"Close":165.020004,"Adj Close":164.569839,"Volume":58337300},{"Date":"2023-04-24","Open":165,"High":165.600006,"Low":163.889999,"Close":165.330002,"Adj Close":164.878983,"Volume":41949600},{"Date":"2023-04-25","Open":165.190002,"High":166.309998,"Low":163.729996,"Close":163.770004,"Adj Close":163.323242,"Volume":48714100},{"Date":"2023-04-26","Open":163.059998,"High":165.279999,"Low":162.800003,"Close":163.759995,"Adj Close":163.313263,"Volume":45498800},{"Date":"2023-04-27","Open":165.190002,"High":168.559998,"Low":165.190002,"Close":168.410004,"Adj Close":167.950592,"Volume":64902300},{"Date":"2023-04-28","Open":168.490005,"High":169.850006,"Low":167.880005,"Close":169.679993,"Adj Close":169.217117,"Volume":55209200}]
                }
              ]
        }        
        title="Apple Historic Stock Data"    
        />);

        expect(console.error).toHaveBeenCalled();
        expect(console.error.mock.calls[0][0]).toContain('TypeError: Unsupported data type for Line Chart. Did you set up your accessors?'); 
        console.error.mockRestore();        
    })    


});

// describe("Categorical Line Chart", () => {


// });